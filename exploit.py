import json
import requests
import os
import sys
import argparse

def exec_genrb(retry=False, enable_debug=False, prompt_index=1):
    import subprocess
    import sys
    print(prompt_index, "prompt index")
    # 步驟 1: 構建基本命令列表 (Python 執行檔, 腳本, URL 參數)
    command = [
        sys.executable,
        "genRb.py"
    ]
    if enable_debug:
        command.append("--debug")
    if retry == True:
        command.append("--retry")
    command.append("-p")
    command.append(str(prompt_index))
    print(f"將執行的指令: {' '.join(command)}")

    try:
        result = subprocess.run(
            command,
            check=True,
            capture_output=True,
            text=True
        )
        print("--- 指令執行成功 ---")
        print("Stdout:\n", result.stdout)
        if result.stderr:
            print("Stderr:\n", result.stderr)
    except subprocess.CalledProcessError as e:
        print(f"--- 指令執行失敗 (回傳碼: {e.returncode}) ---")
        print("Stderr:\n", e.stderr)
    except FileNotFoundError:
        print(f"錯誤：找不到腳本 'genRb.py' 或 Python 執行檔。")
    except Exception as e:
        print(f"發生意外錯誤：{e}")

def main():
    parser = argparse.ArgumentParser(
        description="'Analyze output.json for specific CVEs and generate exploit.rb if found'"
    )
    parser.add_argument("--retry", action='store_true', help="Whether this is a retry attempt")
    parser.add_argument("--debug", action='store_true', help="Enable debug mode")
    parser.add_argument(
        "-p", "--pick",
        type=int,
        metavar="N",
        help="Select an index number (e.g. -p 5). 1-based index by convention.",
        default=None,
        required=True
    )

    args = parser.parse_args()
    prompt_index = args.pick
    print(f"Using prompt index: {prompt_index}")
    enable_debug = args.debug
    retry = args.retry
    with open("output.json", "r", encoding="utf-8-sig") as f:
        data = json.load(f)

    vulns = []
    urls = []
    db_url = []
    for plugin in data.get("plugins", {}).values():
        for vuln in plugin.get("vulnerabilities", []):
            references = vuln.get("references", {})
            cves = references.get("cve", [])
            urls = references.get("url", [])
            db_url = references.get("wpvulndb", [])
            vulns.append({"cves": cves, "urls": urls, "db_url": db_url})

    # print(vulns)
    for vuln in vulns:
        target_cves = ["2020-25213"]#, "2024-5932", , "2025-3102" "2020-12800"
        if any(cve in vuln["cves"] for cve in target_cves):
            print(vuln)
            if not retry:
                init_url = "https://wpscan.com/vulnerability/" + vuln['db_url'][0]
                print(f"[!] Found target CVE URL: {init_url}")
                with open("next_url.txt", "w", encoding="utf-8") as f:
                    f.write(init_url + "\n")
                    for url in vuln["urls"]:
                        f.write(url + "\n")
            exec_genrb(retry=retry, enable_debug=enable_debug, prompt_index=prompt_index)
            break # check the first cve
    

if __name__ == "__main__":
    main()